version: "3.4"
services:
  metadata_worker:
    build: .
    entrypoint: ["npx", "ts-node", "metadata_worker.ts", "--verbose"]
    volumes:
      - ./banner-shots:/app/banner-shots
    depends_on:
      - rabbitmq
    environment:
      QUEUE_URL: amqp://rabbitmq

  # Run multiple instances of screenshot worker to parallelize screenshot jobs.
  # Should be less than 5 to be sure not to run into limits
  screenshot_worker_1:
    build: .
    entrypoint: [ "npx", "ts-node", "screenshot_worker.ts", "--verbose" ]
    volumes:
      - ./banner-shots:/app/banner-shots
    depends_on:
      - rabbitmq
    environment:
      QUEUE_URL: amqp://rabbitmq
      TB_KEY: ${TB_KEY}
      TB_SECRET: ${TB_SECRET}

  screenshot_worker_2:
    build: .
    entrypoint: [ "npx", "ts-node", "screenshot_worker.ts", "--verbose" ]
    volumes:
      - ./banner-shots:/app/banner-shots
    depends_on:
      - rabbitmq
    environment:
      QUEUE_URL: amqp://rabbitmq
      TB_KEY: ${TB_KEY}
      TB_SECRET: ${TB_SECRET}

  screenshot_worker_3:
    build: .
    entrypoint: [ "npx", "ts-node", "screenshot_worker.ts", "--verbose" ]
    volumes:
      - ./banner-shots:/app/banner-shots
    depends_on:
      - rabbitmq
    environment:
      QUEUE_URL: amqp://rabbitmq
      TB_KEY: ${TB_KEY}
      TB_SECRET: ${TB_SECRET}

  screenshot_worker_4:
    build: .
    entrypoint: [ "npx", "ts-node", "screenshot_worker.ts", "--verbose" ]
    volumes:
      - ./banner-shots:/app/banner-shots
    depends_on:
      - rabbitmq
    environment:
      QUEUE_URL: amqp://rabbitmq
      TB_KEY: ${TB_KEY}
      TB_SECRET: ${TB_SECRET}


  rabbitmq:
    image: "rabbitmq"
    ports:
      - "5672:5672"
